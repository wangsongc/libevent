name: CI on windows

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
    - gha-1
    tags:
    - '*'

jobs:
  windows:
    runs-on: windows-2016
    strategy:
      matrix:
        pattern: [0]
    steps:
    - uses: actions/checkout@v1
    - name: Setup Python environment
      uses: actions/setup-python@v1.1.1
      with:
    # Version range or exact version of a Python version to use, using semvers version range syntax.
        python-version: 3.x
    # The target architecture (x86, x64) of the Python interpreter.
        architecture: x64
#     - name: openssl
#       shell: cmd
#       run: |
#        for /r "C:\Program Files (x86)\Microsoft Visual Studio\2017" %%i in (vcvarsall.bat) do @echo %%i 
    - name: install openssl
      shell: powershell
      run: | 
        Invoke-WebRequest -Uri https://github.com/openssl/openssl/archive/OpenSSL_1_1_1c.zip -OutFile openssl-1.1.1c.zip
        echo "****1****"

        7z x openssl-1.1.1c.zip
        echo "****2****"

        cd openssl-OpenSSL_1_1_1c
        echo "****3****"
        
        If ($env:Platform -Match "x86") {
            $env:VCVARS_PLATFORM="x86"
            $env:TARGET="VC-WIN32 no-asm --strict-warnings"
        } Else {
            $env:VCVARS_PLATFORM="amd64"
            $env:TARGET="VC-WIN64A-masm"
        }
        If ($env:Configuration -Match "shared") {
            $env:SHARED="no-makedepend"
        } Else {
            $env:SHARED="no-shared no-makedepend"
        } 
        $env:VSCOMNTOOLS=(Get-Content ("env:VS" + "17" + "0COMNTOOLS"))
        call "%VSCOMNTOOLS%\..\..\VC\vcvarsall.bat" %VCVARS_PLATFORM%   
        mkdir _build
        cd _build
        perl ..\Configure %TARGET% %SHARED%
        perl configdata.pm --dump
        cd ..

        if (-not $env:APPVEYOR_PULL_REQUEST_NUMBER`
            -or (&git log -2 | Select-String "\[extended tests\]") ) {
            $env:EXTENDED_TESTS="yes"
        }
      
        If ($env:Configuration -Match "shared" -or $env:EXTENDED_TESTS) {
            cmd /c "nmake build_all_generated 2>&1"
            cmd /c "nmake PERL=no-perl 2>&1"
        }
        cd ..
        mkdir ..\openssl_install
        cmd /c "nmake install DESTDIR=..\openssl_install 2>&1"
    - name: build and test
      env:
        OPENSSL_USE_STATIC_LIBS: TRUE
        OPENSSL_ROOT: 'C:\Program Files\OpenSSL'
        OPENSSL_ROOT_DIR: 'C:\Program Files\OpenSSL'
        MPATH: C:\Program Files\Git\mingw64\bin
        EVENT_TESTS_PARALLEL: 1
        EVENT_BUILD_PARALLEL: 10  
      shell: powershell
      run: |
        ls $env:OPENSSL_ROOT
        ls -R $env:OPENSSL_ROOT\lib
        # matrix config
        if (${{ matrix.pattern }} -eq 0) {
          $env:EVENT_BUILD_METHOD="cmake"
          $env:EVENT_CMAKE_OPTIONS=""
          $env:APPVEYOR_BUILD_WORKER_IMAGE="Visual Studio 2019"
          echo $env:APPVEYOR_BUILD_WORKER_IMAGE
          $env:JOBS=1         
        }
        # build and test
          $env:PATH="$env:OPENSSL_ROOT\bin;$env:PATH"
          echo ************************
          echo $env:PATH
          echo $env:APPVEYOR_BUILD_WORKER_IMAGE
          echo "OPENSSL_ROOT\bin:$env:OPENSSL_ROOT\bin"
          echo "OPENSSL_ROOT_DIR:$env:OPENSSL_ROOT_DIR"
          echo "OPENSSL_CRYPTO_LIBRARY:$env:OPENSSL_CRYPTO_LIBRARY"
          md build
          cd build
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
          cmake -G 'Visual Studio 15 2017 Win64' .. $env:EVENT_CMAKE_OPTIONS  
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }  
          cmake --build . -j $env:EVENT_BUILD_PARALLEL -- /nologo /verbosity:minimal
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
          ctest --output-on-failure -j $env:EVENT_TESTS_PARALLEL      
