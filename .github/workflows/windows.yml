name: CI on windows

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
    - master
    tags:
    - '*'

jobs:
  linux:
    runs-on: windows-2016
    strategy:
      matrix:
        pattern: [0]
    steps:
    - uses: actions/checkout@v1
    - name: install depend
      run: |
    - name: build and test
      env:
        OPENSSL_ROOT: C:/Strawberry/c
        PYTHON3: C:/Python37-x64/python.exe
        MPATH: C:/mingw-w64/x86_64-7.2.0-posix-seh-rt_v5-rev1/mingw64/bin;C:/msys64/usr/bin
        EVENT_TESTS_PARALLEL: 1
        EVENT_BUILD_PARALLEL: 10  
      shell: powershell
      run: |
        # matrix config
        if (${{ matrix.pattern }} -eq 0) {
          $EVENT_BUILD_METHOD="cmake"
          $EVENT_CMAKE_OPTIONS=""
          $APPVEYOR_BUILD_WORKER_IMAGE="Visual Studio 2017"
          echo $env:APPVEYOR_BUILD_WORKER_IMAGE
          $JOBS=1
          echo $env:PATH
          $env:PATH="$env:OPENSSL_ROOT/bin;$env:PATH;$env:OPENSSL_ROOT/bin"
          echo $env:PATH
        }
        # build and test
        if ($env:EVENT_BUILD_METHOD -eq "autotools") {
          $env:PATH="$env:MPATH;$env:OPENSSL_ROOT/bin;$env:PATH"
          $env:LDFLAGS="-L$($env:OPENSSL_ROOT)/lib -L$($env:OPENSSL_ROOT)"
          $env:CFLAGS="-I$($env:OPENSSL_ROOT)/include"
          $script='
          ./autogen.sh 2>&1 3>&1
          [[ $? -ne 0 ]] && exit 1
          mkdir build-autotools 2>/dev/null
          cd build-autotools
          [[ $? -ne 0 ]] && exit 1
          ../configure $EVENT_CONFIGURE_OPTIONS 2>&1
          [[ $? -ne 0 ]] && exit 1
          make -j $EVENT_BUILD_PARALLEL 2>&1
          [[ $? -ne 0 ]] && exit 1
          make verify -j $EVENT_TESTS_PARALLEL 2>&1 '
          bash -c $script
        } else {
          $env:PATH="$env:OPENSSL_ROOT/bin;$env:PATH;$env:OPENSSL_ROOT/bin"
          echo ************************
          echo $env:APPVEYOR_BUILD_WORKER_IMAGE
          echo $env:LDFLAGS
          echo $env:CFLAGS
          if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Visual Studio 2017") {
            $env:BUILD_DIR="build-cmake"
          }
          if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Previous Visual Studio 2019") {
            $env:BUILD_DIR="build-cmake-vs2019"
          }
          md build-cmake 2> $null
          cd build-cmake
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
          cmake -G 'Visual Studio 15 2017 Win64' .. $env:EVENT_CMAKE_OPTIONS
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
          cmake --build . -j $env:EVENT_BUILD_PARALLEL -- /nologo /verbosity:minimal
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
          if ($env:TEST_EXPORT -eq 'STATIC') {
            &$env:PYTHON3 ../test-export/test-export.py static
          } elseif ($env:TEST_EXPORT -eq 'SHARED') {
            &$env:PYTHON3 ../test-export/test-export.py shared
          } else {
            ctest --output-on-failure -j $env:EVENT_TESTS_PARALLEL
          }
        }
