name: CI on linux

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
    - master

jobs:
  linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-16.04,ubuntu-18.04]
        EVENT_BUILD_METHOD: [cmake,autotools]
#         EVENT_MATRIX: ["","DISABLE-OPENSSL","DISABLE-THREAD-SUPPORT","DISABLE-DEBUG-MODE","DISABLE-MM-REPLACEMENT","COMPILER-CLANG","COVERALLS","TEST-EXPORT-STATIC","TEST-EXPORT-SHARED","OPENSSL-1-1"]    
        EVENT_MATRIX: ["","COVERALLS"]
        exclude:
          - os: ubuntu-18.04   
            EVENT_BUILD_METHOD: autotools
          - os: ubuntu-16.04   
            EVENT_MATRIX: COVERALLS
            EVENT_BUILD_METHOD: autotools
          - os: ubuntu-16.04   
            EVENT_MATRIX: TEST-EXPORT-STATIC
            EVENT_BUILD_METHOD: autotools
          - os: ubuntu-16.04   
            EVENT_MATRIX: TEST-EXPORT-SHARED
            EVENT_BUILD_METHOD: autotools 
          - os: ubuntu-18.04   
            EVENT_MATRIX: TEST-EXPORT-SHARED
          - os: ubuntu-18.04   
            EVENT_MATRIX: TEST-EXPORT-SHARED

    steps:
    - name: set matrix
      run: |
        echo "GITHUB_WORKSPACE:$GITHUB_WORKSPACE"
        if [ "${{ matrix.EVENT_MATRIX }}" == "" ] && [ ${{ matrix.EVENT_BUILD_METHOD }} == cmake ]; then
          export EVENT_CMAKE_OPTIONS=""
        else
          export EVENT_CONFIGURE_OPTIONS=""
        fi
        if [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE-OPENSSL" ] && [ ${{ matrix.EVENT_BUILD_METHOD }} == cmake ]; then
          export EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_OPENSSL=ON"
        else
          export EVENT_CONFIGURE_OPTIONS="--disable-openssl"
        fi
        if [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE-THREAD-SUPPORT" ] && [ ${{ matrix.EVENT_BUILD_METHOD }} == cmake ]; then
          export EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_THREAD_SUPPORT=ON"
        else
          export EVENT_CONFIGURE_OPTIONS="--disable-thread-support"
        fi
        if [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE-DEBUG-MODE" ] && [ ${{ matrix.EVENT_BUILD_METHOD }} == cmake ]; then
          export EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_DEBUG_MODE=ON"
        else
          export EVENT_CONFIGURE_OPTIONS="--disable-debug-mode"
        fi
        if [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE-MM-REPLACEMENT" ] && [ ${{ matrix.EVENT_BUILD_METHOD }} == cmake ]; then
          export EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_MM_REPLACEMENT=ON"
        else
          export EVENT_CONFIGURE_OPTIONS="--disable-malloc-replacement"
        fi
        if [ "${{ matrix.EVENT_MATRIX }}" == "COMPILER-CLANG" ] && [ ${{ matrix.EVENT_BUILD_METHOD }} == cmake ]; then
          export EVENT_CMAKE_OPTIONS=""
          export CC=clang
        else
          export EVENT_CONFIGURE_OPTIONS=""
          export CC=clang
        fi
        if [ "${{ matrix.EVENT_MATRIX }}" == "COVERALLS" ]; then
          export EVENT_CMAKE_OPTIONS="-DEVENT__COVERAGE=ON -DCMAKE_BUILD_TYPE=debug"
          export COVERALLS=yes
        fi 
        if [ "${{ matrix.EVENT_MATRIX }}" == "TEST_EXPORT-STATIC" ]; then
          export EVENT_CMAKE_OPTIONS="-DEVENT__LIBRARY_TYPE=STATIC -DEVENT__DISABLE_TESTS=ON -DEVENT__DISABLE_SAMPLES=ON"
        fi 
        if [ "${{ matrix.EVENT_MATRIX }}" == "TEST_EXPORT-SHARED" ]; then
          export EVENT_CMAKE_OPTIONS="-DEVENT__LIBRARY_TYPE=SHARED -DEVENT__DISABLE_TESTS=ON -DEVENT__DISABLE_SAMPLES=ON"
        fi 
        if [ "${{ matrix.EVENT_MATRIX }}" == "OPENSSL-1-1" ]; then
          export EVENT_CMAKE_OPTIONS=""
        fi 

    - uses: actions/checkout@v1
    - name: Cache
      uses: actions/cache@v1.0.3
      with:
        # A directory to store and save the cache
        path: build
      # An explicit key for restoring and saving the cache
        key: ${{ matrix.os }}-${{ matrix.EVENT_MATRIX }}
    - name: install depend
      run: |
        sudo apt install zlib1g-dev libssl-dev build-essential automake autoconf cmake lcov
    - name: build and test with cmake
      shell: bash
      run: |
        # build and test
        export JOBS=20
        if [ "${{ matrix.EVENT_MATRIX }}" == "COVERALLS" ]; then
          pip install --user cpp-coveralls
        fi
        if [ ${{ matrix.EVENT_BUILD_METHOD }} == cmake ]; then
          export CTEST_PARALLEL_LEVEL=20
          export CTEST_OUTPUT_ON_FAILURE=1
          echo "CTEST_PARALLEL_LEVEL:$CTEST_PARALLEL_LEVEL"
          echo "EVENT_CMAKE_OPTIONS:$EVENT_CMAKE_OPTIONS"
          mkdir -p build &&
          cd build &&
          pwd &&
          cmake .. $EVENT_CMAKE_OPTIONS;
          if [ "${{ matrix.EVENT_MATRIX }}" == "TEST-EXPORT-STATIC" ]; then
            cmake --build .
            sudo python3 ../test-export/test-export.py static
          elif [ "${{ matrix.EVENT_MATRIX }}" == "TEST-EXPORT-SHARED" ]; then
            cmake --build .
            sudo python3 ../test-export/test-export.py shared
          else
            cmake --build . --target verify
          fi
        else
          ./autogen.sh &&
          echo "EVENT_CONFIGURE_OPTIONS:$EVENT_CONFIGURE_OPTIONS"
          ./configure $EVENT_CONFIGURE_OPTIONS &&
          make &&
          make -j $JOBS verify
        fi
        if [ "${{ matrix.EVENT_MATRIX }}" == "COVERALLS" ]; then
          coveralls
            --build-root .
            --root ..
            --exclude test
            --exclude sample
            --exclude cmake
            --exclude build/CMakeFiles/CheckTypeSize
            --exclude build/CMakeFiles/CompilerIdC
            --gcov-options '\-lp';
         fi
#     - name: Coveralls GitHub Action
#       uses: coverallsapp/github-action@v1.0.1
#       with:
#         github-token: ${{ secrets.GHA_TOKEN }}
#       if: matrix.EVENT_MATRIX=='COVERALLS'
    - name: Upload coverage to Codecov
      working-directory: build
      env:
        CODECOV_TOKEN: ${{ secrets.GHA_TOKEN }}
      run: |
        wget https://codecov.io/bash -O codecov
        chmod +x codecov
        ./codecov -t $CODECOV_TOKEN -B $GITHUB_REF -s test/
